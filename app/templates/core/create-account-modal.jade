extends /templates/core/modal-base-flat

block modal-header
  .modal-header(class=state.get('path'))
    +modal-header-content

mixin modal-header-content
  h3
    case state.get('path')
      when 'student'
        span(data-i18n="TODO")
          | Create Student Account
      when 'teacher'
        span(data-i18n="TODO")
          | Create Teacher Account
      when 'individual'
        span(data-i18n="TODO")
          | Create Individual Account
      default
        span(data-i18n="TODO")
          | Create Account

block modal-body
  case state.get('screen')
    when 'choose-account-type'
      +chooseAccountType
    when 'segment-check'
      +segmentCheck
    when 'basic-info'
      +basicInfo
    when 'extras'
      +extras
    when 'confirmation'
      +confirmation
    when 'coppa-deny'
      +coppaDeny

block modal-footer
  .modal-footer(class=state.get('path'))
    +modal-footer-content

mixin modal-footer-content
  .modal-footer-content
    .small-details
      span.spr(data-i18n="TODO")
        | Already have an account?
      a(href="TODO")
        span(data-i18n="TODO")
          | Sign in

mixin chooseAccountType
  .modal-body
    .modal-body-content
      h4
        span(data-i18n="TODO")
          | Choose your account type:
      .path-cards
        .path-card.navy
          .card-title
            span(data-i18n="TODO")
              | Teacher
          .card-content
            h6.card-description
              span(data-i18n="TODO")
                | Teach programming using CodeCombat!
            ul.small.m-t-1
              li
                span(data-i18n="TODO")
                  | Create/manage classes
              li
                span(data-i18n="TODO")
                  | Access course guides
              li
                span(data-i18n="TODO")
                  | View student progress
          .card-footer
            button.btn.btn-lg.btn-navy.teacher-path-button
              .text-h6
                span(data-i18n="TODO")
                  | Sign up as a Teacher

        .path-card.forest
          .card-title
            span(data-i18n="TODO")
              | Student
          .card-content
            h6.card-description
              span(data-i18n="TODO")
                | Learn to program while playing an engaging game!
            ul.small.m-t-1
              li
                span(data-i18n="TODO")
                  | Join a classroom
              li
                span(data-i18n="TODO")
                  | Play assigned Courses
              li
                span(data-i18n="TODO")
                  | Compete in arenas
          .card-footer
            i.small
              span(data-i18n="TODO")
                | Have your class code ready!
            button.btn.btn-lg.btn-forest.student-path-button
              .text-h6
                span(data-i18n="TODO")
                  | Sign up as a Student

      .individual-section
        .individual-title
          span(data-i18n="TODO")
            | Individual
        p.individual-description.small
          span(data-i18n="TODO")
            | Learn to program at your own pace! For players who don't have a class code and want to save their progress. Also parents!
        button.btn.btn-lg.btn-navy.individual-path-button
          .text-h6
            span(data-i18n="TODO")
              | I'm an Individual

mixin segmentCheck
  form.modal-body.segment-check
    .modal-body-content
      case state.get('path')
        when 'student'
          span(data-i18n="TODO")
            | Enter your class code:
          .class-code-input-group
            input.class-code-input(value=state.get('classCode'))
            unless _.isEmpty(state.get('classCode'))
              if state.get('classCodeValid')
                span.glyphicon.glyphicon-ok-circle.class-code-valid-icon
              else
                span.glyphicon.glyphicon-remove-circle.class-code-valid-icon
          
          if _.isEmpty(state.get('classCode'))
            p
              span(data-i18n="TODO")
                | Ask your teacher for your class code.
              br
              span.spr(data-i18n="TODO")
                | Don't have a class code? Create an 
              a(href="TODO")
                span(data-i18n="TODO")
                  | Individual Account
              span.spl(data-i18n="TODO")
                |  instead.
          else if state.get('classCodeValid')
            p
              span(data-i18n="TODO")
                | You're about to join:
              .classroom-name= view.classroom.get('name')
              .teacher-name= view.classroom.owner.get('name')
            
        when 'teacher'
          // TODO
        when 'individual'
          .birthday-form-group.form-group
            span(data-i18n="TODO")
              | Enter your birthdate:
            .input-border
              select#birthday-month-input.input-large.form-control(name="birthdayMonth", style="width: 106px; float: left" value=state.get('birthdayMonth'))
                option(value='',data-i18n="calendar.month")
                for name, val in ['january','february','march','april','may','june','july','august','september','october','november','december']
                  option(data-i18n="calendar.#{name}" value=val+1)
              select#birthday-day-input.input-large.form-control(name="birthdayDay", style="width: 75px; float: left" value=state.get('birthdayDay'))
                option(value='',data-i18n="calendar.day")
                for dummy, val in new Array(31)
                  option #{val+1}
              select#birthday-year-input.input-large.form-control(name="birthdayYear", style="width: 90px;" value=state.get('birthdayYear'))
                option(value='',data-i18n="calendar.year")
                - var startYear = new Date().getFullYear() - 1
                for dummy, val in new Array(100)
                  option #{startYear-val}

        default
          span
            | Something went wrong :(

    // In reverse order for tabbing purposes
    .history-nav-buttons
      //- disabled=!state.get('segmentCheckValid')
      button.next-button.btn.btn-lg.btn-navy(type='submit')
        span(data-i18n="TODO")
          | Next

      button.back-to-account-type.btn.btn-lg.btn-navy-alt(type='button')
        span(data-i18n="TODO")
          | Back
    

mixin basicInfo
  form#basic-info-form.modal-body.basic-info
    .modal-body-content
      div
        if ['student', 'teacher'].indexOf(state.get('path')) !== -1
          .row.full-name
            .form-group
              label.control-label(for="first-name-input")
                span(data-i18n="TODO")
                  | First name:
              input#first-name-input(name="firstName" value="h")
            .last-initial.form-group
              label.control-label(for="last-name-input")
                span(data-i18n="TODO")
                  | Last initial:
              input#last-name-input(name="lastName" maxlength="1" value="h")
        .row
          .form-group
            label.control-label(for="email-input")
              span(data-i18n="TODO")
                | Email address:
            input#email-input(name="email" type="email" value="h@h.com")
        .row
          .form-group
            label.control-label(for="username-input")
              span(data-i18n="TODO")
                | Username:
            input#username-input(name="name" value="h")
        .row
          .form-group
            label.control-label(for="password-input")
              span(data-i18n="TODO")
                | Password:
            input#password-input(name="password" type="password" value="hh")
        .row
          .form-group.checkbox.subscribe
            label.control-label(for="subscribe-input")
              input#subscribe-input(type="checkbox" checked="checked" name="subscribe")
              span.small(data-i18n="TODO")
                | Receive announcements about CodeCombat

    // In reverse order for tabbing purposes
    .history-nav-buttons
      // disabled=!state.get('basicInfoValid')
      button.next-button.btn.btn-lg.btn-navy(type='submit')
        span(data-i18n="TODO")
          | Create Account

      button.back-to-segment-check.btn.btn-lg.btn-navy-alt(type='button')
        span(data-i18n="TODO")
          | Back

mixin coppaDeny
  form.modal-body.coppa-deny
    .modal-body-content
      .form-group
        label.control-label(for="parent-email-input")
          span(data-i18n="TODO")
            | Enter your parent's email address:
        input#parent-email-input(type="email" name="parentEmail")
  
    // In reverse order for tabbing purposes
    .history-nav-buttons
      // disabled=!state.get('basicInfoValid')
      button.next-button.btn.btn-lg.btn-navy(type='submit')
        span(data-i18n="TODO")
          | Create Account

      button.back-button.btn.btn-lg.btn-navy-alt(type='button')
        span(data-i18n="TODO")
          | Back
  
mixin extras
mixin confirmation
  

//- .modal-dialog
//-   .modal-content
//-     img(src="/images/pages/modal/auth/signup-background.png", draggable="false").auth-modal-background
//-     h1(data-i18n="login.sign_up")
//- 
//-     div#close-modal
//-       span.glyphicon.glyphicon-remove
//- 
//-   form.auth-form-content
//-     if view.options.showRequiredError
//-       #required-error-alert.alert.alert-success
//-         span(data-i18n="signup.required")
//-     if view.options.showSignupRationale
//-       #signup-rationale-alert.alert.alert-info
//-         span(data-i18n="play_level.victory_sign_up_poke")
//- 
//-     #email-password-row.row
//-       .col-md-6
//-         .form-group
//-           label.control-label(for="email")
//-             span(data-i18n="general.email")
//-             | :
//-           .input-border
//-             input#email.input-large.form-control(name="email", type="email", value=view.previousFormInputs.email, tabindex=1)
//-   
//-         .form-group
//-           label.control-label(for="password")
//-             span(data-i18n="general.password")
//-             | :
//-           .input-border
//-             input#password.input-large.form-control(name="password", type="password", value=view.previousFormInputs.password, tabindex=2)
//- 
//-       .col-md-6
//-         .auth-network-logins.text-center
//-           strong(data-i18n="signup.or_sign_up_with")
//-           button#facebook-signup-btn.btn.btn-primary.btn-lg.btn-illustrated.network-login(disabled=true)
//-             img.network-logo(src="/images/pages/community/logo_facebook.png", draggable="false")
//-             span.sign-in-blurb(data-i18n="login.sign_in_with_facebook")
//-           button#gplus-signup-btn.btn.btn-danger.btn-lg.btn-illustrated.network-login(disabled=true)
//-             img.network-logo(src="/images/pages/community/logo_g+.png", draggable="false")
//-             span.sign-in-blurb(data-i18n="login.sign_in_with_gplus")
//-             .gplus-login-wrapper
//-               .gplus-login-button
//-                   
//-     #gplus-logged-in-row.row.text-center.hide
//-       h2(data-i18n="signup.connected_gplus_header")
//-       p(data-i18n="signup.connected_gplus_p")
//-       
//-     #gplus-account-exists-row.row.text-center.hide
//-       h2(data-i18n="signup.gplus_exists")
//-       a.btn.btn-primary#gplus-login-btn(data-i18n="login.log_in")
//-       
//-     #facebook-logged-in-row.row.text-center.hide
//-       h2(data-i18n="signup.connected_facebook_header")
//-       p(data-i18n="signup.connected_facebook_p")
//-       
//-     #facebook-account-exists-row.row.text-center.hide
//-       h2(data-i18n="signup.facebook_exists")
//-       a.btn.btn-primary#facebook-login-btn(data-i18n="login.log_in")
//- 
//-     .row
//-       .col-md-6
//-         .form-group
//-           label.control-label(for="name")
//-             span(data-i18n="general.username")
//-             | :
//-           .input-border
//-             if me.get('name')
//-               input#name.input-large.form-control(name="name", type="text", value=me.get('name'), tabindex=3)
//-             else
//-               input#name.input-large.form-control(name="name", type="text", value="", placeholder="e.g. Alex W the Skater", tabindex=3)
//-               
//-         .form-group
//-           label.control-label(for="birthday-input")
//-             span(data-i18n="signup.birthday")
//-             | :
//-           .input-border
//-             select#birthday-month-input.input-large.form-control(name="birthdayMonth", value=view.previousFormInputs.birthdayMonth || '', tabindex=4, style="width: 106px; float: left")
//-               option(value='',data-i18n="calendar.month")
//-               for name, val in ['january','february','march','april','may','june','july','august','september','october','november','december']
//-                 option(data-i18n="calendar.#{name}" value=val+1)
//-             select#birthday-day-input.input-large.form-control(name="birthdayDay", value=view.previousFormInputs.birthdayDay || '', tabindex=5, style="width: 75px; float: left")
//-               option(value='',data-i18n="calendar.day")
//-               for dummy, val in new Array(31)
//-                 option #{val+1}
//-             select#birthday-year-input.input-large.form-control(name="birthdayYear", value=view.previousFormInputs.birthdayMonth || '', tabindex=6, style="width: 90px;")
//-               option(value='',data-i18n="calendar.year")
//-               - var startYear = new Date().getFullYear() - 1
//-               for dummy, val in new Array(100)
//-                 option #{startYear-val}
//- 
//-         .form-group
//-           label.control-label(for="school-input")
//-             span.spr(data-i18n="courses.class_code")
//-             em.optional-note
//-               | (
//-               span(data-i18n="signup.optional")
//-               | ):
//-           .input-border
//-             input#class-code-input.input-large.form-control(name="classCode", value=view.previousFormInputs.classCode || '', tabindex=7)
//-             
//-       .col-md-6
//-         .form-group.checkbox
//-           label.control-label(for="subscribe")
//-             .input-border
//-               input#subscribe(type="checkbox", checked='checked')
//-               span.custom-checkbox
//-                 .glyphicon.glyphicon-ok
//-             span(data-i18n="signup.email_announcements")
//-             
//-     .well(data-i18n="signup.hey_students")
//-               
//- 
//-     input#signup-button.btn.btn-lg.btn-illustrated.btn-block.btn-success(value=translate("signup.sign_up"), type="submit")
//- 
//-   .extra-pane
//-     .switch-explanation(data-i18n="signup.login_switch")
//-     .btn.btn-lg.btn-illustrated.btn-warning#switch-to-login-btn(data-i18n="login.log_in")
